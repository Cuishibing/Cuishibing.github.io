<p>class Github {</p><p>&nbsp; &nbsp; constructor(repo, token) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.apihost = 'https://api.github.com';</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.repo = repo</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.token = token</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; /**</p><p>&nbsp; &nbsp; &nbsp;*</p><p>&nbsp; &nbsp; &nbsp;* @param {Array} files</p><p>&nbsp; &nbsp; &nbsp;* [</p><p>&nbsp; &nbsp; &nbsp;* {</p><p>&nbsp; &nbsp; &nbsp;* &nbsp;path, content</p><p>&nbsp; &nbsp; &nbsp;* }</p><p>&nbsp; &nbsp; &nbsp;* ]</p><p>&nbsp; &nbsp; &nbsp;* @returns</p><p>&nbsp; &nbsp; &nbsp;*/</p><p>&nbsp; &nbsp; async commitFile(files) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let masterRef = await this.loadRef("heads/master")</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let masterCommit = await this.loadCommit(masterRef.object.sha)</p><p>&nbsp; &nbsp; &nbsp; &nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; this.rootTree = masterCommit.tree.sha</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let createTrees = []</p><p>&nbsp; &nbsp; &nbsp; &nbsp; files.forEach(file =&gt; {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!file.path) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file.path.length == 0) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file.path[file.path.length - 1] == "/") {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (file.path[0] == "/") {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; file.path = file.path.substr(1)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let ct = this._createTree(file.path, file.content)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; createTrees.push(ct)</p><p>&nbsp; &nbsp; &nbsp; &nbsp; })</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // call api create tree</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let createTreeResult = await this.createTree(this.rootTree, createTrees)</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // call api commit</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let createCommitResult = await this.createCommit(createTreeResult.sha, [masterCommit.sha], "auto commit", {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: "Cuishibing",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email: "643237029@qq.com"</p><p>&nbsp; &nbsp; &nbsp; &nbsp; })</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; // call api update ref</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.updateRef("heads/master", createCommitResult.sha)</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; _createTree(path, content) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; let fileContent = null;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (typeof content == "string") {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fileContent = content</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; path: path,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mode: fileContent ? "100644" : "040000",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; type: fileContent ? "blob" : "tree",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; content: fileContent</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async getTreesWithCache(sha) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (this.treeCache[sha]) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return this.treeCache[sha]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; } else {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let treeInfo = await this.loadTree(sha)</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.treeCache[sha] = treeInfo.tree</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return treeInfo.tree</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async gitReq(method, url, data) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await req(this.apihost + url, method, this.assemblyHeader(), data);</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; assemblyHeader() {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; if (this.token) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return [</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: "Authorization",</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value: "token " + this.token</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]</p><p>&nbsp; &nbsp; &nbsp; &nbsp; }</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return []</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async loadRef(ref) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("GET", "/repos/" + this.repo + "/git/refs/" + ref)</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async updateRef(ref, sha) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("PATCH", "/repos/" + this.repo + "/git/refs/" + ref, {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sha: sha,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; force: true</p><p>&nbsp; &nbsp; &nbsp; &nbsp; })</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async loadCommit(sha) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("GET", "/repos/" + this.repo + "/git/commits/" + sha)</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async loadTree(sha) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("GET", "/repos/" + this.repo + "/git/trees/" + sha)</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async createTree(base_tree, tree) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("POST", "/repos/" + this.repo + "/git/trees", {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; base_tree: base_tree,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tree: tree</p><p>&nbsp; &nbsp; &nbsp; &nbsp; })</p><p>&nbsp; &nbsp; }</p><p><br>&nbsp;</p><p>&nbsp; &nbsp; async createCommit(treeSha, parents, msg, author) {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; return await this.gitReq("POST", "/repos/" + this.repo + "/git/commits", {</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; message: msg,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tree: treeSha,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parents: parents,</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; author: author</p><p>&nbsp; &nbsp; &nbsp; &nbsp; })</p><p>&nbsp; &nbsp; }</p><p>}</p><p><br>&nbsp;</p><p>export { Github }</p>